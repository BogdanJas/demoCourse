version: '3.8'

services:
  database:
    image: postgres:15-alpine
    container_name: coursedemo-db
    environment:
      POSTGRES_DB: CourseDemo
      POSTGRES_USER: ed
      POSTGRES_PASSWORD: .eURO2016
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coursedemo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ed -d CourseDemo"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./Backend/CourseDemo
      dockerfile: Dockerfile
    container_name: coursedemo-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=database;Database=CourseDemo;Username=ed;Password=.eURO2016;Port=5432;
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - coursedemo-network
    restart: unless-stopped

  frontend:
    build:
      context: ./react-frontend
      dockerfile: Dockerfile
    container_name: coursedemo-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - coursedemo-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  coursedemo-network:
    driver: bridge 